 1、实验目的

1）掌握C#命令行参数的接收；

2）掌握C#中的泛型用法；

3）掌握C#的基本流程语句；

4）掌握C#的随机数生成；

5）了解C#的异常处理流程；

6）掌握C#的计时器及对代码的性能优化。

7）本实验注重算法实现，在实现功能的前提下，尽量优化计算速度。

 

2、实验要求

这是一个实际的项目衍生出来的核心算法之一。防伪码是我们现在经常在商品上看到的防伪手段之一，现在需要编写一个防伪码生成器，按照输入参数生成防伪码，并且把生成的时间及指定的防伪码输出。

1）防伪码的组成

防伪码由以下字符组成：0123456789ABCDEFGHJKLMNPQRSTUVWXYZ

（数字1和字母I相近、数字0和字母O相近，所以去掉字母I和字母O。全部字母大写） \

2）在命令行中输入2个参数，分别是：

    防伪码长度
    防伪码个数

例如：在命令行中调用程序为：学号.exe 10 10000

指的是防伪码长度为10，生成10000个防伪码。

3）防伪码的生成及注意事项

    防伪码的长度由命令行参数决定；
    所生成的防伪码不能重复（按照以上例子，生成了10000个防伪码，这10000个防伪码就肯定不能重复）。

 

3、提交内容

1）请把整个项目源代码压缩为RAR文件进行提交

2）运行：

a) exe 10 10000

b) exe 20 1000000

c) exe 50 1000000

（即防伪码长度为10，10000个；长度为20，一百万个；长度为50，一百万个）共三个测试用例，记下时间，贴在“自评备注”中，格式如下：

a) 时间；b) 时间；c) 时间
下面可以写写自己的感想等

 

4、实验评分

程序能运行，按照全部要求实现：A及以上

程序能运行，但有Bug的（指生成重复的防伪码等）：B

程序不能运行，但有思路的：C及以下

0：发现抄袭行为，本次实验0分，累计两次，平时成绩0分。

额外要求：代码命名必须有一定规范、代码格式必须靓仔，歪歪扭扭的扣分。

 

5、采用的函数及思路

1）开发时，在解决方案中，鼠标右键选择项目，然后点选“属性”，在“调试”项目中的“命令行参数”里面，可以预先输入需在命令行接收的参数，这样开发的时候就可以直接读入了。注意，不用对这些参数进行校验，默认输入的都是正确的参数，注意程序运行时的异常处理。

 

2）程序运行计时

在最上面加入using System.Diagnostics;

在程序头加入：

Stopwatch timer1 = new Stopwatch();//计时器类
timer1.Start();//开始计时

在程序最尾加入：

timer1.Stop();//停止计时
double dMilliseconds = timer1.Elapsed.TotalMilliseconds;
Console.WriteLine("生成个数为：{0}，运行时间为：{1}", icount, dMillisecondes);
Console.ReadKey();

Stopwatch是C#一个类似秒表的东西，用来计算程序的运行时间，注意，必须按照要求，计时器在程序运行时就要开启，在结束时停止并输出结果，不能放置在其他地方。

 

3）防伪码生成思路

例如，有以下定义：

string strTableChar = "0123456789ABCDEFGHJKLMNPQRSTUVWXYZ";

生成一个从0到strTableChar.Length的数字a，然后使用strTableChar[a]就可以随机返回一个字母，重复n次（n等于防伪码的长度），这样就可以组合到一串随机字符串，也就是防伪码了。

 

6、思路及技巧

1）随机数生成：种子的选择问题，可用默认的、GUID、RNGCryptoServiceProvider等等作为随机数种子……

2）怎么样保证，新生成的防伪码和以生成的防伪码有没有重复？

3）stringBuilder的用法，试试用string和stringBuilder有什么不同？听听老师的课……

4）多次运行程序后，会不会发现程序运行速度会加快？看看这里：《告诉一个不一样的.NET Framework字符串驻留》，另外也可以找找对应.NET Framework底层实现的文章。

无输出
a) 7.9189；b) 1360.7193；c) 3362.3895

有输出
a) 7.9189；b) 1360.7193；c) 3362.3895

一开始简单实现了功能，可能有重复的
然后加了RNGCryptoServiceProvider来生成随机种子，速度感觉
然后加了哈希来验证有无出现重复，关于字典树查看msdn上的http://msdn.microsoft.com/zh-cn/library/s4ys34ea.aspx
关于哈希值参考了这篇文章 《Guidelines and rules for GetHashCode》blogs.msdn.com/b/ericlippert/archive/2011/02/28/guidelines-and-rules-for-gethashcode.aspx